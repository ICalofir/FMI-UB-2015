Sockets
===================

1.chat (without GUI) 

Clients op:
   - connect to server IP
   - see all connected people
   - talk to a nickname
   - broadcast a message to everybody


vehicle syncronization (UDP or TCP)  - simple GUI using 2 rectangles on screen. COnsider 2 players connected to each other. Each one is driving a rectangle with keys. Try to syncronize their movement such that they look the same.
   2. lockstep with buffer (send input each frame, have a buffer of inputs)
   3. dead reckoning (anticipate movement of opponent by his last inputs then when the input arrives correct the position and direction of the rectangle).

4. generic platform for online gaming (consider just 1 vs 1 peer to peer game, WITHOUT GUI).

   - clients can connect to server and wait for someone to play with. Each client defines matchmaking properties (eg. Max Level of opponent).
   - server will connect clients based on their requests
   - clients will play the game (simulate ) using a peer to peer communication. 

 Create 2 components: a client component and a server component.

5. P2P file sharing protocol with 2 components: server discovery and file transfer component

Client op:
      join serverIP: register to server 
      publish folder: sends the list of files available on client in a folder
      search fileName: search a filename and if it's shared by a client connected to the server, return his address.
      fetch:  download the file searched using TCP and place it in his shared folder.
   



RMI
===============

1. ATM/bank system.

 A client (unique accountId) can go to an ATM and use 3 operations:

     - deposit(accountId, int amount)
     - widthdraw(accountId, int amount)
     - int inquiry(int accountId)

 Also, consider that multiple clients with the same accountId can request widthdraw/ operations.

2. Football ticket reservation

 A client can:
    - request a list of places. (seats in 1,N). If can take them all, return back success (true) and a reservation id, otherwise return false and reserve no ticket.
    - query the list of empty places
    - query his reservation by an id.


3. Implement project 4. from sockets using RMI. Have a method on the RMI derived class called WantsToPlay ( MatchMakingSettings settings).


4. Closest Shop localisation:

   - Have two servers:   a) used for getting the latitude and longitude of a Client (use random values for this).
                         b) used to identify the closest K (fixed ) shops to a given latitude and longitude

   - A client would invoke first server a) to get his coordinates then call server b) to find the closest shops to go.

a) and b) must RMI classes with shared interfaces between client/server.


5. Chat app from Sockets, using RMI and everything goes through server (same operations).

  
Servlets
==================

Implement one of the following project using a servlet and possible with JDBC:

1. Project 1 from RMI
2. Project 2 from RMI
3. Project 4 from RMI
4. Implement a system to store user data for clients  (strings, pictures). They can add, remove, see their personal content.
5. Implement a system for a vacation agency.
     There are 2 roles :
        - clients that can add / remove vacation entires (place, date as strings)
        - clients that can search for vacation between 2 dates.

     Use http servlets
 
