import binaryTree.*;
import java.io.*;
import java.util.*;

class Parent implements Comparable<Parent> {
	public String nume;
	public int varsta;
	
	public Parent(String nume, int varsta) {
		this.nume = nume;
		this.varsta = varsta;
	}
	
	public int compareTo(Parent obj) {
		return nume.compareTo(obj.nume);
	}
}

class Child extends Parent {
	public Child(String nume, int varsta) {
		super(nume, varsta);
	}
	
	public int compareTo(Parent obj) {
		return obj.varsta - this.varsta;
//		return varsta - obj.varsta;
	}
}

public class p4 {
	public static void main(String[] args) throws Exception {
		binaryTree<Integer, Integer> bt = new binaryTree<Integer, Integer>();
		
		File fin = new File("date.in");
		Scanner sc = null;
		
		try {
			sc = new Scanner(fin);
			
			while (sc.hasNextInt()) {
				int nr = sc.nextInt();
				bt.insert(nr, nr);
			}
			
		} catch (Exception ex) {
			throw ex;
		} finally {
			if (sc != null) {
				sc.close();
			}
		}
		
		System.out.println(bt);
		
		ArrayList<Child> l = new ArrayList<Child>();
		l.add(new Child(2, "bbbb"));
		l.add(new Child(40, "aaaa"));
		Collections.sort(l);
		for (Child it : l) {
			System.out.println(it.nume + it.varsta);
		}
	}
}
