import java.io.*;
import java.util.*;

public class p1 {
	private static int n, p;
	private static int sol, last_pos;
	private static ArrayList<pair> v;
	// dp[i] - inaltimea maxima a unui turn care se termina pe pozitia i
	private static ArrayList<Integer> dp, pre;
	
	private static class pair implements Comparable<pair> {
		int l, c;
		
		pair(int l, int c) {
			this.l = l;
			this.c = c;
		}
		
		public int compareTo(pair obj) {
			return l - obj.l;
		}
	}
	
	private static void read() throws Exception {
		File fin = new File("date.in");
		Scanner sc = null;
		
		sc = new Scanner(fin);
		
		n = sc.nextInt();
		p = sc.nextInt();
		v = new ArrayList<pair>(n + 1);
		dp = new ArrayList<Integer>(n + 1);
		pre = new ArrayList<Integer>(n + 1);
		for (int i = 1, l, c; i <= n; ++i) {
			l = sc.nextInt();
			c = sc.nextInt();
			pair p = new pair(l, c);
			
			v.add(p);
		}
		
		Collections.sort(v);
		System.out.println(dp.size());
			
		if (sc != null) {
			sc.close();
		}
	}
	
	private static void solve() {
		dp.set(1, 1);
		sol = 1;
		
		for (int i = 2; i <= n; ++i) {
			dp.set(i, 1);
			for (int j = 1; j < i; ++j) {
				if (v.get(j).l < v.get(i).l && v.get(j).c != v.get(i).c && dp.get(j) + 1 > dp.get(i)) {
					pre.set(i, j);
					dp.set(i, dp.get(j) + 1);
					
					if (dp.get(i) > sol) {
						sol = dp.get(i);
						last_pos = i;
					}
				}
			}
		}
	}
	
	private static void write_path(int pos, Writer wr) throws Exception {
		if (pos == 0) {
			return;
		}
		
		wr.write(v.get(pos).l + ' ' + v.get(pos).c + '\n');
		write_path(pre.get(pos), wr);
	}
	
	private static void write() throws Exception {
		Writer wr = new FileWriter("date.out");
		
		write_path(last_pos, wr);
		
		wr.write(sol + '\n');
		wr.close();
	}
	
	public static void main(String args[]) throws Exception {
		read();
//		solve();
//		write();
	}
}
