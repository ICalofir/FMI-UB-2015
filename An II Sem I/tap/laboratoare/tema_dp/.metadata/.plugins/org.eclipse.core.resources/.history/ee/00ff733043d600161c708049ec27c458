import java.util.*;
import java.io.*;

public class p5 {
	private static int n, tmax;
	private static triplet[] v;
	private static int[][] dp;
	
	private static class triplet implements Comparable<triplet> {
		int p, t, l;
		
		triplet(int p, int t, int l) {
			this.p = p;
			this.t = t;
			this.l = l;
		}
		
		public int compareTo(triplet obj) {
			return t - obj.t;
		}
	}
	
	private static void read() throws Exception {
		File fin = new File("date.in");
		Scanner sc = null;
		
		sc = new Scanner(fin);
		
		n = sc.nextInt();
		v = new triplet[n + 1];
		v[0] = new triplet(0, 0, 0);
		for (int i = 1, p, t, l; i <= n; ++i) {
			p = sc.nextInt();
			t = sc.nextInt();
			l = sc.nextInt();
			v[i] = new triplet(p, t, l);
			
			if (t > tmax) {
				tmax = t;
			}
		}
		dp = new int[n + 1][tmax + 1];
		Arrays.sort(v, 1, n + 1);
		for (int i = 1; i <= n; ++i) {
			System.out.println(v[i].p + " " + v[i].t + " " + v[i].l);
		}
		
		if (sc != null) {
			sc.close();
		}
	}
	
	private static int get_minim(int a, int b) {
		if (a < b)
			return a;
		return b;
	}
	
	private static int get_maxim(int a, int b) {
		if (a > b)
			return a;
		return b;
	}
	
	private static void solve() {
		for (int i = 1; i <= n; ++i) {
			for (int j = 1; j <= tmax; ++j) {
				int tt = get_minim(j, v[i].t) - v[i].l;
				
				if (tt < 0) {
					dp[i][j] = dp[i - 1][j];
					continue;
				}
				
				dp[i][j] = get_maxim(dp[i - 1][j], v[i].p + dp[i - 1][tt]);
			}
		}
		
		System.out.println(dp[n][tmax]);
	}
	
	public static void main(String[] args) throws Exception {
		read();
		solve();
	}
}
